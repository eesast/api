openapi: 3.0.0
servers:
  - url: "https://api.eesast.com"
    description: Remote API Server
  - url: "http://localhost:{port}"
    description: Local API Server
    variables:
      port:
        description: 端口号
        default: "28888"
info:
  title: API Backend for EESAST
  description: |
    清华大学电子工程系学生科协后端 API。了解更多 EESAST 内容，请访问：[GitHub 主页](https://github.com/eesast/)或 [EESAST 官方网站](https://eesast.com/)。
  version: 1.0.0
  contact:
    name: API Support
    email: i@raineggplant.com
tags:
  - name: articles
    description: 文章
  - name: comments
    description: 评论
  - name: items
    description: 物品
  - name: reservations
    description: 预约
  - name: users
    description: 用户
  - name: static
    description: 静态文件
paths:
  /v1/articles:
    post:
      tags:
        - articles
      summary: 发布一篇新文章
      description: 需要 `root` 或 `writer` 角色
      operationId: addArticle
      responses:
        "201":
          description: Successful operation
          headers:
            Location:
              description: 新发布文章的 URL
              schema:
                type: string
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        5XX:
          description: Unexpected error
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/addArticle"
      parameters: []
    get:
      tags:
        - articles
      summary: 返回匹配查询的文章
      description: 可以通过 query 进行筛选
      operationId: findArticles
      parameters:
        - name: title
          in: query
          description: 文章标题，采用部分匹配
          schema:
            type: string
        - name: author
          in: query
          description: 作者
          schema:
            type: string
        - name: alias
          in: query
          description: 别名，通常是文章的 URL
          schema:
            type: string
        - name: tag
          in: query
          description: 标签
          schema:
            type: string
        - name: likedBy
          in: query
          description: 点赞者 ID
          schema:
            type: number
        - name: begin
          in: query
          description: 按时间降序排列，起始文章的位置
          schema:
            type: number
        - name: end
          in: query
          description: 按时间降序排列，结束文章的位置
          schema:
            type: number
        - name: noContent
          in: query
          description: "设置是否需要获取文章内容。若设置为 `true`, 则响应中不包含 `content` 键值对"
          schema:
            type: boolean
        - name: invisible
          in: query
          description: 设置是否查看隐藏的文章
          schema:
            type: boolean
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Article"
        5XX:
          description: Unexpected error
  "/v1/articles/{articleId}":
    get:
      tags:
        - articles
      summary: 根据 ID 获取文章
      operationId: getArticleById
      parameters:
        - name: articleId
          in: path
          description: 文章 ID
          required: true
          schema:
            type: number
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Article"
        "404":
          description: "Not Found: Article does not exist"
        5XX:
          description: Unexpected error
    put:
      tags:
        - articles
      summary: 更新已存在的文章
      description: 需要 `root` 角色，或待更新文章的作者为请求者
      operationId: updateArticle
      parameters:
        - name: articleId
          in: path
          description: 待更新文章的 ID
          required: true
          schema:
            type: number
      responses:
        "204":
          description: Successful operation
          headers:
            Location:
              description: 被更新文章的 URL
              schema:
                type: string
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "Not Found: Article does not exist"
        5XX:
          description: Unexpected error
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/updateArticle"
    delete:
      tags:
        - articles
      summary: 删除一篇文章
      description: 需要 `root` 角色
      operationId: deleteArticle
      parameters:
        - name: articleId
          in: path
          description: 要删除文章的 ID
          required: true
          schema:
            type: number
      responses:
        "204":
          description: Successful operation
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "Not Found: Article does not exist"
        5XX:
          description: Unexpected error
      security:
        - bearerAuth: []
  "/v1/articles/{articleId}/like":
    get:
      tags:
        - articles
      summary: 点赞
      description: 需要已登录用户
      operationId: likeArticle
      parameters:
        - name: articleId
          in: path
          description: 点赞文章的 ID
          required: true
          schema:
            type: number
      responses:
        "204":
          description: Successful operation
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "Not Found: Article does not exist"
        5XX:
          description: Unexpected error
      security:
        - bearerAuth: []
  "/v1/articles/{articleId}/unlike":
    get:
      tags:
        - articles
      summary: 取消点赞
      description: 需要已登录用户
      operationId: unlikeArticle
      parameters:
        - name: articleId
          in: path
          description: 取消点赞文章的 ID
          required: true
          schema:
            type: number
      responses:
        "204":
          description: Successful operation
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "Not Found: Article does not exist"
        5XX:
          description: Unexpected error
      security:
        - bearerAuth: []
  /v1/comments:
    post:
      tags:
        - comments
      summary: 发布一条新评论
      description: "需要 `root`, `writer` 或 `reader` 角色"
      operationId: addComment
      responses:
        "201":
          description: Successful operation
          headers:
            Location:
              description: 新发布评论的 URL
              schema:
                type: string
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        5XX:
          description: Unexpected error
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/addComment"
      parameters: []
    get:
      tags:
        - comments
      summary: 返回匹配查询的评论
      description: 可以通过 query 进行筛选
      operationId: findComments
      parameters:
        - name: replyTo
          in: query
          description: "回复的上级评论的 ID, -1 代表一级（独立）评论"
          schema:
            type: number
        - name: likedBy
          in: query
          description: 点赞者 ID
          schema:
            type: number
        - name: articleId
          in: query
          schema:
            type: number
        - name: authorId
          in: query
          schema:
            type: number
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
        5XX:
          description: Unexpected error
  "/v1/comments/{commentId}":
    get:
      tags:
        - comments
      summary: 根据 ID 获取评论
      operationId: getCommentById
      parameters:
        - name: commentId
          in: path
          description: 评论 ID
          required: true
          schema:
            type: number
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "404":
          description: "Not Found: Comment does not exist"
        5XX:
          description: Unexpected error
    put:
      tags:
        - comments
      summary: 更新已存在的评论
      description: 需要 `root` 角色，或待更新评论的作者为请求者
      operationId: updateComment
      parameters:
        - name: commentId
          in: path
          description: 待更新评论的 ID
          required: true
          schema:
            type: number
      responses:
        "204":
          description: Successful operation
          headers:
            Location:
              description: 被更新评论的 URL
              schema:
                type: string
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "Not Found: Comment does not exist"
        5XX:
          description: Unexpected error
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/updateComment"
    delete:
      tags:
        - comments
      summary: 删除一条评论
      description: 需要 `root` 角色
      operationId: deleteComment
      parameters:
        - name: commentId
          in: path
          description: 待删除评论的 ID
          required: true
          schema:
            type: number
      responses:
        "204":
          description: Successful operation
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "Not Found: Comment does not exist"
        5XX:
          description: Unexpected error
      security:
        - bearerAuth: []
  "/v1/comments/{commentId}/like":
    get:
      tags:
        - comments
      summary: 点赞
      description: 需要已登录用户
      operationId: likeComment
      parameters:
        - name: commentId
          in: path
          description: 点赞评论的 ID
          required: true
          schema:
            type: number
      responses:
        "204":
          description: Successful operation
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "Not Found: Comment does not exist"
        5XX:
          description: Unexpected error
      security:
        - bearerAuth: []
  "/v1/comments/{commentId}/unlike":
    get:
      tags:
        - comments
      summary: 取消点赞
      description: 需要已登录用户
      operationId: unlikeComment
      parameters:
        - name: commentId
          in: path
          description: 取消点赞评论的 ID
          required: true
          schema:
            type: number
      responses:
        "204":
          description: Successful operation
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "Not Found: Comment does not exist"
        5XX:
          description: Unexpected error
      security:
        - bearerAuth: []
  /v1/items:
    post:
      tags:
        - items
      summary: 添加一个新物品
      description: 需要 `root` 或 `keeper` 角色
      operationId: addItem
      responses:
        "201":
          description: Successful operation
          headers:
            Location:
              description: 新添加物品的 URL
              schema:
                type: string
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        5XX:
          description: Unexpected error
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/addItem"
      parameters: []
    get:
      tags:
        - items
      summary: 返回匹配查询的物品
      description: 可以通过 query 进行筛选
      operationId: findItems
      parameters:
        - name: name
          in: query
          description: 物品名称
          schema:
            type: string
        - name: available
          in: query
          description: 当前是否可用
          schema:
            type: boolean
        - name: begin
          in: query
          description: 按时间降序排列，起始物品的位置
          schema:
            type: number
        - name: end
          in: query
          description: 按时间降序排列，结束物品的位置
          schema:
            type: number
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Item"
        5XX:
          description: Unexpected error
  "/v1/items/{itemId}":
    get:
      tags:
        - items
      summary: 根据 ID 获取物品
      operationId: getItemById
      parameters:
        - name: itemId
          in: path
          description: 物品 ID
          required: true
          schema:
            type: number
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        "404":
          description: "Not Found: Item does not exist"
        5XX:
          description: Unexpected error
    put:
      tags:
        - items
      summary: 更新已存在的物品
      description: 需要 `root` 或 `keeper` 角色
      operationId: updateItem
      parameters:
        - name: itemId
          in: path
          description: 需要更新的物品的 ID
          required: true
          schema:
            type: number
      responses:
        "204":
          description: Successful operation
          headers:
            Location:
              description: 被更新物品的 URL
              schema:
                type: string
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "Not Found: Item does not exist"
        5XX:
          description: Unexpected error
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/updateItem"
    delete:
      tags:
        - items
      summary: 删除一个物品
      description: 需要 `root` 或 `keeper` 角色
      operationId: deleteItem
      parameters:
        - name: itemId
          in: path
          description: 要删除物品的 ID
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Successful operation
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "Not Found: Item does not exist"
        5XX:
          description: Unexpected error
      security:
        - bearerAuth: []
  /v1/reservations:
    post:
      tags:
        - reservations
      summary: 新增一个预约
      description: 需要已登录用户
      operationId: addReservation
      responses:
        "201":
          description: Successful operation
          headers:
            Location:
              description: 新增预约的 URL
              schema:
                type: string
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        5XX:
          description: Unexpected error
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/addReservation"
      parameters: []
    get:
      tags:
        - reservations
      summary: 返回匹配查询的预约
      description: 可以通过 query 进行筛选
      operationId: getReservations
      parameters:
        - name: itemId
          in: query
          schema:
            type: number
        - name: userId
          in: query
          schema:
            type: number
        - name: from
          in: query
          description: 预约起始日期
          schema:
            $ref: "#/components/schemas/Date"
        - name: to
          in: query
          description: 预约截止日期
          schema:
            $ref: "#/components/schemas/Date"
        - name: begin
          in: query
          description: 按时间降序排列，起始预约的位置
          schema:
            type: number
        - name: end
          in: query
          description: 按时间降序排列，结束预约的位置
          schema:
            type: number
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Reservation"
        5XX:
          description: Unexpected error
  "/v1/reservations/{reservationId}":
    get:
      tags:
        - reservations
      summary: 根据 ID 获取预约
      operationId: getReservationById
      parameters:
        - name: reservationId
          in: path
          description: 预约 ID
          required: true
          schema:
            type: number
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reservation"
        "404":
          description: "Not Found: Item does not exist"
        5XX:
          description: Unexpected error
    put:
      tags:
        - reservations
      summary: 更新已存在的预约
      description: 需要 `root` 或 `keeper` 角色
      operationId: updateReservation
      parameters:
        - name: reservationId
          in: path
          description: 需要更新的预约的 ID
          required: true
          schema:
            type: number
      responses:
        "204":
          description: Successful operation
          headers:
            Location:
              description: 被更新预约的 URL
              schema:
                type: string
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "Not Found: Reservation does not exist"
        5XX:
          description: Unexpected error
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/updateReservation"
    delete:
      tags:
        - reservations
      summary: 删除一个预约
      description: 需要 `root` 或 `keeper` 角色
      operationId: deleteReservation
      parameters:
        - name: reservationId
          in: path
          description: 要删除预约的 ID
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Successful operation
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "Not Found: Reservation does not exist"
        5XX:
          description: Unexpected error
      security:
        - bearerAuth: []
  /v1/users:
    post:
      tags:
        - users
      summary: 新建用户
      description: '新增用户的默认用户组为 "student", 角色为 "reader"'
      operationId: addUser
      responses:
        "201":
          description: Successful operation
          headers:
            Location:
              description: 新增用户的 URL
              schema:
                type: string
        "422":
          description: "Unprocessable Entity: Missing form data"
        5XX:
          description: Unexpected error
      requestBody:
        $ref: "#/components/requestBodies/addUser"
      parameters: []
    get:
      tags:
        - users
      summary: 返回匹配查询的用户
      description: 需要已登录用户，可以通过 query 进行筛选
      operationId: getUsers
      parameters:
        - name: username
          in: query
          schema:
            type: string
        - name: department
          in: query
          schema:
            type: string
        - name: class
          in: query
          schema:
            type: string
        - name: begin
          in: query
          description: 按创建时间降序排列，起始用户的位置
          schema:
            type: number
        - name: end
          in: query
          description: 按创建时间降序排列，结束用户的位置
          schema:
            type: number
        - name: detailInfo
          in: query
          description: >-
            设置是否需要获取用户具体信息。若设置为 `false`, 则响应中仅包含 `id`, `createdAt`, `createdBy`,
            `updatedAt` 和 `updatedBy` 键值对
          schema:
            type: boolean
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        5XX:
          description: Unexpected error
      security:
        - bearerAuth: []
  "/v1/users/{userId}":
    get:
      tags:
        - users
      summary: 根据 ID 获取用户
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: number
        - name: detailInfo
          in: query
          description: >-
            设置是否需要获取用户具体信息。若设置为 `false`, 则响应中仅包含 `id`, `createdAt`, `createdBy`,
            `updatedAt` 和 `updatedBy` 键值对
          schema:
            type: boolean
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "Not Found: User does not exist"
        5XX:
          description: Unexpected error
      security:
        - bearerAuth: []
    put:
      tags:
        - users
      summary: 更新已存在的用户
      description: 需要 `root` 角色，或待更新用户为请求者自身
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: number
      responses:
        "204":
          description: Successful operation
          headers:
            Location:
              description: 更新用户的 URL
              schema:
                type: string
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "Not Found: User does not exist"
        5XX:
          description: Unexpected error
      requestBody:
        $ref: "#/components/requestBodies/updateUser"
      security:
        - bearerAuth: []
    delete:
      tags:
        - users
      summary: 删除一个用户
      description: 需要 `root` 角色
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: number
      responses:
        "204":
          description: Successful operation
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "Not Found: User does not exist"
        5XX:
          description: Unexpected error
      security:
        - bearerAuth: []
  /v1/users/login:
    post:
      tags:
        - users
      summary: 用户登录
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: >-
                      eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MCwidXNlcm5hbWUiOiJhZG1pbiIsImdyb3VwIjoiYWRtaW4iLCJyb2xlIjoicm9vdCIsImlhdCI6MTU0OTE2MTI5NiwiZXhwIjoxNTQ5MjA0NDk2fQ.1__SnI_vAeMrIZe6D0mXv4_umQEg53_iUHNeGJOQSoU
        "401":
          description: Invalid password supplied
        "404":
          description: "Not Found: User does not exist"
        5XX:
          description: Unexpected error
      parameters: []
  /v1/users/forgot:
    get:
      tags:
        - users
      summary: 忘记密码
      operationId: recoverAccount
      responses:
        "404":
          description: Operation not implemented yet
      parameters: []
  "/static/{category}":
    post:
      tags:
        - static
      summary: 上传文件
      description: 需要 `root` 或 `writer` 角色
      operationId: uploadFile
      parameters:
        - name: category
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "201":
          description: Successful operation
          headers:
            Location:
              description: 新增文件的 URL
              schema:
                type: string
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        5XX:
          description: Unexpected error
      security:
        - bearerAuth: []
  "/static/{category}/{filename}":
    delete:
      tags:
        - static
      summary: 删除一个文件
      description: 需要 `root` 或 `writer` 角色
      operationId: deleteFile
      parameters:
        - name: category
          in: path
          required: true
          schema:
            type: string
        - name: filename
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Successful operation
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "Not Found: File does not exist"
        5XX:
          description: Unexpected error
      security:
        - bearerAuth: []
components:
  schemas:
    Article:
      type: object
      required:
        - id
        - title
        - alias
        - authorId
        - content
      properties:
        id:
          type: number
          description: 自增值
        title:
          type: string
        alias:
          type: string
          description: 用于 SEO 与 URL
        authorId:
          type: number
        content:
          type: string
          description: 文章内容(支持 Markdown)
        abstract:
          type: string
          description: 摘要，用于预览功能
        image:
          type: string
          description: 文章标题图片
        views:
          type: number
          default: 0
        likers:
          type: array
          items:
            type: number
            description: 点赞用户的 ID
        tags:
          type: array
          items:
            type: string
        visible:
          type: boolean
          default: false
          description: 文章可见性，用于审阅功能
        createdAt:
          $ref: "#/components/schemas/Date"
        createdBy:
          type: number
        updatedAt:
          $ref: "#/components/schemas/Date"
        updatedBy:
          type: number
    Comment:
      type: object
      required:
        - id
        - authorId
        - articleId
        - content
        - replyTo
      properties:
        id:
          type: number
          description: 自增值
        authorId:
          type: number
        articleId:
          type: number
        content:
          type: string
          description: 评论内容(支持 Markdown)
        replyTo:
          type: number
          description: "回复的上级评论的 ID, -1 代表一级（独立）评论"
        likers:
          type: array
          items:
            type: number
            description: 点赞用户的 ID
        createdAt:
          $ref: "#/components/schemas/Date"
        createdBy:
          type: number
        updatedAt:
          $ref: "#/components/schemas/Date"
        updatedBy:
          type: number
    User:
      type: object
      required:
        - id
        - username
        - group
        - role
        - password
      properties:
        id:
          type: number
          description: 通常是学号
        username:
          type: string
          description: 字母、数字组合
        group:
          type: string
          enum:
            - admin
            - student
          description: |
            用户组:
             * `admin` - 管理员
             * `student` - 学生
        role:
          type: string
          enum:
            - root
            - editor
            - keeper
            - reader
            - writer
          description: |
            用户组:
             * `root` - 权限：weekly(rwe), resource(rwe), user(rwe)
             * `editor` - 权限：weekly(rwe), resource(r), user(r)
             * `keeper` - 权限：weekly(r), resource(rwe), user(r)
             * `reader` - 权限：weekly(r), resource(r), user(r)
             * `writer` - 权限：weekly(rw), resource(r), user(r)
        password:
          type: string
        email:
          type: string
        name:
          type: string
        phone:
          type: number
        department:
          type: string
        class:
          type: string
        createdAt:
          $ref: "#/components/schemas/Date"
        createdBy:
          type: number
        updatedAt:
          $ref: "#/components/schemas/Date"
        updatedBy:
          type: number
    Counter:
      type: object
      required:
        - _id
      properties:
        _id:
          type: string
        count:
          type: number
          default: 0
    Item:
      type: object
      required:
        - id
        - name
        - total
        - left
      properties:
        id:
          type: number
        name:
          type: string
        description:
          type: string
        total:
          type: number
        left:
          type: number
        createdAt:
          $ref: "#/components/schemas/Date"
        createdBy:
          type: number
        updatedAt:
          $ref: "#/components/schemas/Date"
        updatedBy:
          type: number
    Reservation:
      type: object
      required:
        - id
        - itemId
        - userId
        - from
        - to
      properties:
        id:
          type: number
        itemId:
          type: number
        userId:
          type: number
        from:
          $ref: "#/components/schemas/Date"
        to:
          $ref: "#/components/schemas/Date"
        reason:
          type: string
        approved:
          type: boolean
          default: false
        createdAt:
          $ref: "#/components/schemas/Date"
        createdBy:
          type: number
        updatedAt:
          $ref: "#/components/schemas/Date"
        updatedBy:
          type: number
      description: from/to 指 预约起始/结束时间
    Date:
      type: string
      format: date-time
      description: >-
        日期对象。使用时采用 ISO
        格式字符串表示。[更多信息](https://www.iso.org/iso-8601-date-and-time-format.html)
  requestBodies:
    addArticle:
      content:
        application/json:
          schema:
            type: object
            required:
              - title
              - alias
              - authorId
              - content
            properties:
              title:
                type: string
              alias:
                type: string
                description: 用于 SEO 与 URL
              authorId:
                type: number
              content:
                type: string
                description: 文章内容(支持 Markdown)
              abstract:
                type: string
                description: 摘要，用于预览功能
              image:
                type: string
                description: 文章标题图片
              tags:
                type: array
                items:
                  type: string
              visible:
                type: boolean
                default: false
                description: 文章可见性，用于审阅功能
      description: 发布文章的提交格式
      required: true
    updateArticle:
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
              alias:
                type: string
                description: 用于 SEO 与 URL
              authorId:
                type: number
              content:
                type: string
                description: 文章内容(支持 Markdown)
              abstract:
                type: string
                description: 摘要，用于预览功能
              image:
                type: string
                description: 文章标题图片
              views:
                type: number
                default: 0
              likers:
                type: array
                items:
                  type: number
                  description: 点赞用户的 ID
              tags:
                type: array
                items:
                  type: string
              visible:
                type: boolean
                default: false
                description: 文章可见性，用于审阅功能
      description: 更新文章的提交格式
      required: true
    addComment:
      content:
        application/json:
          schema:
            type: object
            required:
              - authorId
              - articleId
              - content
              - replyTo
            properties:
              authorId:
                type: number
              articleId:
                type: number
              content:
                type: string
                description: 评论内容(支持 Markdown)
              replyTo:
                type: number
                description: "回复的上级评论的 ID, -1 代表一级（独立）评论"
      description: 发布评论的提交格式
      required: true
    updateComment:
      content:
        application/json:
          schema:
            type: object
            properties:
              authorId:
                type: number
              articleId:
                type: number
              content:
                type: string
                description: 评论内容(支持 Markdown)
              replyTo:
                type: number
                description: "回复的上级评论的 ID, -1 代表一级（独立）评论"
              likers:
                type: array
                items:
                  type: number
                  description: 点赞用户的 ID
      description: 更新评论的提交格式
      required: true
    addItem:
      content:
        application/json:
          schema:
            required:
              - name
              - total
              - left
            properties:
              id:
                type: number
              name:
                type: string
              description:
                type: string
              total:
                type: number
              left:
                type: number
      description: 新增物品的提交格式
      required: true
    updateItem:
      content:
        application/json:
          schema:
            properties:
              name:
                type: string
              description:
                type: string
              total:
                type: number
              left:
                type: number
      description: 更新物品的提交格式
      required: true
    addReservation:
      content:
        application/json:
          schema:
            required:
              - itemId
              - userId
              - from
              - to
            properties:
              itemId:
                type: number
              userId:
                type: number
              from:
                $ref: "#/components/schemas/Date"
              to:
                $ref: "#/components/schemas/Date"
              reason:
                type: string
      description: 新增预约的提交格式
      required: true
    updateReservation:
      content:
        application/json:
          schema:
            properties:
              itemId:
                type: number
              userId:
                type: number
              from:
                $ref: "#/components/schemas/Date"
              to:
                $ref: "#/components/schemas/Date"
              reason:
                type: string
              approved:
                type: boolean
      description: 更新预约的提交格式
      required: true
    addUser:
      content:
        application/json:
          schema:
            required:
              - id
              - username
              - password
            properties:
              id:
                type: number
              username:
                type: string
              password:
                type: string
              email:
                type: string
              name:
                type: string
              phone:
                type: number
              department:
                type: string
              class:
                type: string
      description: 新增用户的提交格式
      required: true
    updateUser:
      content:
        application/json:
          schema:
            properties:
              username:
                type: string
              password:
                type: string
              email:
                type: string
              name:
                type: string
              phone:
                type: number
              department:
                type: string
              class:
                type: string
      description: 更新用户的提交格式
      required: true
  responses:
    UnauthorizedError:
      description: "Access token is missing, invalid or expired / Permission denied"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  links: {}
  callbacks: {}
security: []
